+------+
| TODO |
+------+

Orcus:
	* GPIO functions
	* LCD functions
	* Audio
	* SD card
	* NAND
	* ARM940T - this will require implementing the locks in __syscalls, to prevent mallocing the same thing (and also so you can actually use mutexes etc. if newlib provides them!). probably a shared heap ptr too? Will need to translate between the two


Correct init sequence for SD:
// go idle
mwh phys 0xC000150a 0x0F00
mwh phys 0xC0001504 0x0000
mwh phys 0xC0001506 0x0000
mwh phys 0xC0001508 0x0140
mdh phys 0xc000150a

// check sd version
mwh phys 0xC000150a 0x0F00
mwh phys 0xC0001504 0x01AA
mwh phys 0xC0001506 0x0000
mwh phys 0xC0001508 0x0348
mdh phys 0xc000150a

// cmd 55 - acmd41
mwh phys 0xC000150a 0x0F00
mwh phys 0xC0001504 0x0000
mwh phys 0xC0001506 0x0000
mwh phys 0xC0001508 0x0377
mdh phys 0xc000150a

mwh phys 0xC000150a 0x0F00
mwh phys 0xC0001504 0x0000
mwh phys 0xC0001506 0x0000
mwh phys 0xC0001508 0x0369
mdh phys 0xc000150a
mdh phys 0xc000150c
mdh phys 0xc000150e



static struct mtd_partition partition_info[] = {
        {
                name:           "Bootloader",
                size:           0x80000,
                offset:         0,
                mask_flags:     MTD_WRITEABLE,                          
        }, {
                name:           "Kernel",
                size:           0x120000,
                offset:         MTDPART_OFS_APPEND,
        }, {
                name:           "Param",
                size:           0x60000,                                        
                offset:         MTDPART_OFS_APPEND,
        }, {
                name:           "Filesystem",
                size:           MTDPART_SIZ_FULL,                                       
                offset:         MTDPART_OFS_APPEND,
        }
};

// Not convinced the boot params are needed for executing a gp2x kernel
        /* arch number of MMSP20-Board */
        gd->bd->bi_arch_number = 395;

        /* adress of boot parameters */
        gd->bd->bi_boot_params = 0x00100100;


// need to pad bootloader to 0x80000 bytes so we make sure to erase the complete area. We should then reserve the final 512 bytes for config

// when loading uboot from SD card, need to check the first few bytes for 0x03E0... or whatever to find RESET vector, and load at that address

// may need to try to obligerate code for loading from nand too if we are booting from SD

// should be trivial, the code segment is easy to identify in a disassembly, just need to scan for the binary